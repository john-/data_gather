#!/usr/bin/perl

use Mojolicious::Lite;
use Mojo::IOLoop;
use Mojo::JSON qw(decode_json);
use Mojo::Util qw(dumper);
use Mojo::Pg;
use Mojo::Pg::PubSub;
use Mojo::JSON qw(decode_json encode_json);
use Mojo::Log;

use Device::Chip::Adapter;
use Device::Chip::INA219;
use Device::Chip::TMP102;
use Device::Chip::ADT7470;

use Statistics::Basic qw(:all);
use Time::HiRes qw( usleep );
use File::Basename;
use IO::Handle;
use File::Temp;    # names for tts files

use FindBin qw($Bin);

my $config = plugin Config => { file => "$Bin/../config/gather.conf" };

app->log( Mojo::Log->new( path => "$Bin/../log/data_gather.log" ) );

app->plugin('RenderFile');
app->plugin('CORS');
app->plugin('ForkCall');    # used to have swift not block

app->secrets( ['Specfying a secret to make the reminder go away.'] );

get '/self' => sub {
    my $c = shift;

    $c->render( json => { function => 'Misc' } );

# ugh this is nasty but I need to store it here because it does not work in the helper
    app->defaults->{audio_url} = $c->url_for('audio')->to_abs;
};

get '/script' => { template => 'script' };

get '/audio' => sub {
    my $c    = shift;
    my $file = $c->param('file');

    # Open file in browser(do not show save dialog)
    $c->render_file(
        'filepath'            => "$Bin/../archive/audio/$file",
        'content_disposition' => 'inline'
    );
};

websocket '/output' => sub {
    my $c = shift;

    $c->inactivity_timeout(60);

    my $client =
      $c->tx->remote_address . $c->tx->remote_port;    # unique identifier
        # TODO: delete this on connection close

    $c->send( { json => app->config_msg } );

    my $cb = $c->pubsub->listen(
        sensor_msg => sub {
            my ( $pubsub, $payload ) = @_;
            my $msg = decode_json($payload);
            $c = $c->send( { json => $msg } );
            app->log->debug(
                "item to let client know about (pubsub): $msg->{type}");
        }
    );

    $c->on(
        json => sub {
            my ( $ws, $hash ) = @_;

            #app->log->debug("Message: ".dumper($hash));
        }
    );

    $c->on(
        finish => sub {
            my ( $c, $code, $reason ) = @_;
            $c->pubsub->unlisten( sensor_msg => $cb );
            $c->app->log->debug("WebSocket closed ($code)");
        }
    );

};

websocket '/output_detail' => sub {
    my $c = shift;

    $c->inactivity_timeout(60);

    my $client =
      $c->tx->remote_address . $c->tx->remote_port;    # unique identifier
        # TODO: delete this on connection close

    # send initial values
    foreach my $input ( keys %{$config->{inputs}} ) {
        $c->send(
            { json => { "${input}_min" => $config->{inputs}{$input}{min} } } );
        $c->send(
            { json => { "${input}_max" => $config->{inputs}{$input}{max} } } );
    }

    my $cb = $c->pubsub->listen(
        sensor_detail_msg => sub {
            my ( $pubsub, $payload ) = @_;
            my $msg = decode_json($payload);
            $c = $c->send( { json => $msg } );

 #app->log->debug("item to let client know about (pubsub/detail)".dumper($msg));
        }
    );

    $c->on(
        json => sub {
            my ( $ws, $hash ) = @_;

            if ( $hash->{type} eq 'close' ) {
                $ws->finish;
            }
        }
    );

    $c->on(
        finish => sub {
            my ( $c, $code, $reason ) = @_;
            $c->pubsub->unlisten( sensor_detail_msg => $cb ) or
                $c->app->log->error('could not unlisten');
            $c->app->log->debug(
                "WebSocket for details closed ($code) client $client");
        }
    );
};

helper pg => sub {
    state $pg = Mojo::Pg->new('postgresql://script@/cart')
      or app->log->error('Could not connect to database');
};

helper pubsub => sub {
    my $self = shift;

    state $pubsub = Mojo::Pg::PubSub->new( pg => $self->pg );
};

helper config_msg => sub {
    my $self = shift;

    return { type => 'config', %{$config} };
};

helper speak => sub {
    my ( $self, $utterance ) = @_;

    app->log->info( sprintf( 'utterance: %s', $utterance ) );

    if ( app->defaults->{tts_count} ge 4 ) {
        app->log->info('tts has been throttled!');
        return;
    }

    app->defaults->{tts_count}++;

    my $tmp = File::Temp->new(
        TEMPLATE => 'temp-XXXXX',
        DIR      => "$Bin/../archive/audio",
        SUFFIX   => '.audio'
    );
    my $filename = $tmp->filename;

    my($file, $dirs, $suffix) = fileparse($filename);

    my @args = ( sprintf( 'echo "%s" | /usr/bin/text2wave -o %s', $utterance, $filename ) );
    $self->fork_call(
        sub {
            my $detail = {
                type   => 'audio',
                volume => $config->{volume},
                file   => $file . $suffix,
                label  => $utterance,
                url    => app->defaults->{audio_url},
            };

            system(@args);
            return $detail;
        },
        sub {
            my ( $c, $detail ) = @_;

	    #app->log->debug(dumper($detail));
            #if (-f $detail->{file}) {
                $c->pubsub->notify( sensor_msg => encode_json($detail) );
	    #} else {
	    #    app->log->error( 'No audio file available' );
	    #}
        }
    );

};

helper adapter => sub {
    my $ADAPTER = "LinuxKernel";

    state $adapter = Device::Chip::Adapter->new_from_description( $ADAPTER )
      or app->log->error('Could not create adapter');
};

helper ina => sub {
    my $self = shift;

    my $MOUNTPARAMS = 'bus=/dev/i2c-1,addr=0x40';

    state $ina = Device::Chip::INA219->new;

    $ina->mount_from_paramstr(
	    $self->adapter,
	    $MOUNTPARAMS,
	)->get;
};

helper tmp102 => sub {
    my $self = shift;

    my $MOUNTPARAMS = 'bus=/dev/i2c-1,addr=0x48';

    state $tmp102 = Device::Chip::TMP102->new;

    $tmp102->mount_from_paramstr(
	    $self->adapter,
	    $MOUNTPARAMS,
	)->get;
};

helper adt7470 => sub {
    my $self = shift;

    my $MOUNTPARAMS = 'bus=/dev/i2c-1,addr=0x2E';

    state $adt7470 = Device::Chip::ADT7470->new;

    $adt7470->mount_from_paramstr(
	    $self->adapter,
	    $MOUNTPARAMS,
	)->get;
};

my @time     = localtime;
my $gps_file = sprintf(
    '%s/../data/%04d%02d%02d-%d.gps',
    $Bin,
    $time[5] + 1900,
    $time[4] + 1,
    $time[3], $$
);
open( my $gps_fh, '>', $gps_file )
  or die app->log->error("cannot open $gps_file for output: $!");
$gps_fh->autoflush;

my $id = Mojo::IOLoop->client(
    { port => 2947 } => sub {
        my ( $loop, $err, $stream ) = @_;

        $stream->on(
            read => sub {
                my ( $stream, $bytes ) = @_;

                # Process input
                foreach my $line ( split /\n/, $bytes ) {
                    my $sentence = decode_json($line);

                    #app->log->debug(dumper($sentence));
                    if (   ( $sentence->{class} eq 'TPV' )
                        && ( $sentence->{mode} >= 2 ) )
                    {
                        $config->{inputs}{speed}{value} =
                          $config->{inputs}{speed}{calc}($sentence->{speed});

                        print $gps_fh $line;
                    }
                }

            }
        );

        # Write request
        $stream->write('?WATCH={"enable":true,"json":true}');

    }
);

foreach my $measures ( keys %{$config->{inputs}} ) {
    my $input = $config->{inputs}->{$measures};
    my $type = $input->{type};
    if ( $type =~ /poll/ ) {
        # do polling
	Mojo::IOLoop->recurring(
            $input->{rate} => sub {
                my $loop = shift;

		if ( $type eq 'poll_ina219_voltage' ) {
		    $input->{value} = $input->{calc}
		    ( app->ina->read_bus_voltage->get/1000 );
		} elsif ( $type eq 'poll_ina219_current' ) {
		    $input->{value} = $input->{calc}
		    ( app->ina->read_shunt_voltage->get );
		} elsif ( $type eq 'poll_tmp102' ) {
		    $input->{value} = $input->{calc}
		    ( app->tmp102->read_temp->get );
		} elsif ( $type eq 'poll_adt7470' ) {
		    $input->{value} = $input->{calc}
		    ( app->adt7470->read_fan_rpm($input->{fan})->get );
                } elsif ( $type eq 'poll_1wire' ) {
                    $input->{value} = $input->{calc}
		      ( get_1wire( $input->{file} ) );
                }
                else {
                    $input->{value} = $input->{calc}
                      ( get_reading( $input->{file}, $input->{iterations} ) );
                }

            }
        );
    }
}

Mojo::IOLoop->recurring(
    1 => sub {

        my @updates;
        foreach my $measures ( keys %{$config->{inputs}} ) {
            my $input = $config->{inputs}{$measures};
            if ( exists $input->{value} ) {
                app->log->debug("update to $measures: $input->{value}");
                my $cur_val = delete $input->{value};
                push @updates, { $measures => $cur_val };    # for db update

                app->pubsub->notify( sensor_detail_msg =>
                      encode_json( { $measures . '_val' => $cur_val } ) );

		if ( (!exists $input->{min}) || ($cur_val < $input->{min}) ) {
		    $input->{min} = $cur_val;
                    app->pubsub->notify( sensor_detail_msg =>
                        encode_json( { $measures . '_min' => $cur_val } ) );
		}
		if ( (!exists $input->{max}) || ($cur_val > $input->{max}) ) {
		    $input->{max} = $cur_val;
                    app->pubsub->notify( sensor_detail_msg =>
                        encode_json( { $measures . '_max' => $cur_val } ) );
		}

                # handle any updates that require tts (max speed or threshold crossing)
                if ( $input->{notify}{threshold} eq 'max' ) {
                    if ( $cur_val >= $input->{notify}{prev} ) {
                        $input->{notify}{prev} = $cur_val;
                        my $max_announce =
                          sprintf(
                            'New maximimum speed of %.2f miles per hour',
                            $input->{notify}{prev} );
                        app->log->info($max_announce);
                        Mojo::IOLoop->timer(
                            4 => sub { app->speak($max_announce) } );
                    }
                    #$input->{val} = $cur_val;
                }
                elsif ( $input->{notify}{threshold} =~ /\d+/ ) {
                    if ( abs( $input->{notify}{prev} - $cur_val ) >= $input->{notify}{threshold} )
                    {
                        app->log->info(
                            sprintf(
                                'need to speak %s changed more than %d',
                                $measures, $input->{notify}{threshold}
                            )
                        );
                        app->speak( sprintf( $input->{notify}{phrase}, $cur_val ) );
                        $input->{notify}{prev} = $cur_val;
                    }
                }

            }
        }

        foreach my $row (@updates) {
            my ( $input, $value ) = each(%$row);
            app->pg->db->query(
                'insert into sensor_history (input, value) values (?, ?)',
                $input, $value ) or app->log->error("could not update the database: $input->{value}");
        }
    }
);

Mojo::IOLoop->recurring(
    $config->{fan_control}{rate} => sub {
	my $fc = $config->{fan_control};
        # get most recent cpu temp
	my $results = app->pg->db->query(
	    'select value from sensor_history where input = \'cpu_temp\' order by reading_key desc limit 1' ) or app->log->error("could not retrieve cpu temperature");
	my $cpu_temp = $results->hash->{value};

	# map it to percent
	# If your number X falls between A and B, and you would like Y to fall between C and D, you can apply the following linear transform:

	# Y = (X-A)/(B-A) * (D-C) + C
	my $percent = sprintf( '%d', ($cpu_temp - $fc->{temp}{min}) /
	    ($fc->{temp}{max} - $fc->{temp}{min}) * ($fc->{speed}{max} - $fc->{speed}{min}) +
	    $fc->{speed}{min} );

	if ($percent > $fc->{speed}{max}) { $percent = $fc->{speed}{max} }
	if ($percent < $fc->{speed}{min}) { $percent = $fc->{speed}{min} }

	app->log->debug(sprintf('fan control: cpu_temp is %.1fF, changing fan speed to %d%%', $cpu_temp, $percent));

	# change fan speed to the percent
	foreach my $fan (1..2) {
	    app->adt7470->write_duty_percent($fan, $percent)->get;
	}
    }
);

sub get_1wire {
    my $file = shift(@_);

    open( my $fh, '<', $file ) or die "Can't open $file: $!";
    my @lines = <$fh>;
    close $fh;

    my $raw;
    foreach my $line (@lines) {
        if ( $line =~ /t\=(\d+)/ ) {
            $raw = $1;
        }
    }

    return $raw / 1000;
}

sub get_reading {
    my ( $file, $iterations, $extractor ) = @_;

    my @readings;
    for ( my $i = 1 ; $i <= $iterations ; $i++ ) {
        open( my $fh, '<', $file ) or die "Can't open $file: $!";
        my $read = <$fh>;
        close $fh;
        push @readings, $read;
        usleep(200);    # can't go faster than 125 as /sys is limited to 8kSPS
    }

    #print @readings;
    my $mean = mean( \@readings );

    my $stddev = stddev( \@readings );
    if ( $stddev >= 4.0 ) {

        #    if ( $stddev >= 3.5 ) {
        app->log->debug("out of range std dev: $stddev");

        #$mean = 'U';
    }

    return $mean;
}

helper reset_tts_throttle => sub {
    my $self = shift;

    app->defaults->{tts_count} = 0;

    Mojo::IOLoop->timer( 30 => sub { app->reset_tts_throttle } );
};

sub load_min_max {

    Mojo::IOLoop->delay(
        sub {
            my $delay = shift;
            app->pg->db->query(
'select input, min(value), max(value) from sensor_history where recorded_at > now() - interval \'3 days\' group by input'
                  => $delay->begin );
        },
        sub {
            my ( $delay, $err, $results ) = @_;
            foreach my $item ( @{ $results->hashes->to_array } ) {
                $config->{inputs}{ $item->{input} }{min} = $item->{min};
                $config->{inputs}{ $item->{input} }{max} = $item->{max};
            }
        }
    )->wait;
}

app->reset_tts_throttle;

load_min_max;

app->start;

__DATA__

@@ script.html.ep
console.log("Data Gather code running");

var dgather_ws = new WebSocket('<%= url_for('output')->to_abs %>');

setInterval(function () {
        dgather_ws.send(JSON.stringify( { type: "ping" } ));
        }, 45000
);

var dgather_config;
dgather_ws.onmessage = function (event) {
    var msg = $.parseJSON(event.data);

    switch (msg.type) {
        case 'audio':
            enqueue(msg);
            break;
//        case 'update':
//            dgather_page();
//            break;
        case 'config':
            dgather_config = msg;
            //console.log('got the config: ' + dgather_config.inputs.speed.type);
            break;
    }

};

//function injectStyles(rule) {
//  var div = $("<div />", {
//    html: '&shy;<style>' + rule + '</style>'
//  }).appendTo("body");
//}

//injectStyles('.position_improve.ui-btn.ui-btn-icon-right.ui-icon-carat-r { background-color: green; }');
//injectStyles('.position_deprove.ui-btn.ui-btn-icon-right.ui-icon-carat-r { background-color: red; }');
//injectStyles('.status_pit.ui-btn.ui-btn-icon-right.ui-icon-carat-r { background-color: orange; }');

//injectStyles = null;

var dgather_detail_ws;

misc_page = function () {

    // TODO: this is pretty convoluted and better way should be found
    //       Actually, there might not be a need for this.  To be verified. (TODO)
    var active_id = $("#switcher").tabs("option", "active");
    active = $("#switcher ul>li a").eq(active_id).attr('href');

    if (active != '#misc') {
        console.log('Execute data gather cleanup');
        dgather_detail_ws.send(JSON.stringify( { type: "close" } ));
        //dgather_detail_ws.close();
        return
    }

    console.log("Populating data gather page");

    // $('#misc').empty();   // probably need to empty this when leaving the page or don't bother starting over
    $('#misc').empty().append('<div class="ui-grid-c" id="readings"</div>');

        $('<div class="ui-block-a">').append(
            $('<div>', {
                class: 'ui-bar ui-bar-a',
                text: 'Input',
        })).appendTo('#readings');

        $('<div class="ui-block-b">').append(
            $('<div>', {
                class: 'ui-bar ui-bar-a',
                text: 'Now',
        })).appendTo('#readings');

        $('<div class="ui-block-c">').append(
            $('<div>', {
                class: 'ui-bar ui-bar-a',
                text: 'Minimum',
        })).appendTo('#readings');

        $('<div class="ui-block-d">').append(
            $('<div>', {
                class: 'ui-bar ui-bar-a',
                text: 'Maximum',
        })).appendTo('#readings');



    $.each(dgather_config.inputs, function(key, val) {
        //$('#misc').append('<p>' + key + '</p>');

        $('<div class="ui-block-a">').append(
            $('<div>', {
                class: 'ui-bar ui-bar-a',
                text: key,
        })).appendTo('#readings');

        $('<div class="ui-block-b">').append(
            $('<div>', {
                class: 'ui-bar ui-bar-a',
                text: 'value',
                id: key + '_val',
        })).appendTo('#readings');

        $('<div class="ui-block-c">').append(
            $('<div>', {
                class: 'ui-bar ui-bar-a',
                text: 'min',
                id: key + '_min',
        })).appendTo('#readings');

        $('<div class="ui-block-d">').append(
            $('<div>', {
                class: 'ui-bar ui-bar-a',
                text: 'max',
                id: key + '_max',
        })).appendTo('#readings');
    });

    dgather_detail_ws = new WebSocket('<%= url_for('output_detail')->to_abs %>');

    dgather_detail_ws.onmessage = function (event) {
        var msg = $.parseJSON(event.data);

        var measures = Object.keys(msg)[0];
        $('#' + measures).text(msg[measures]);
    }

};

misc_config = function() {

    // approach from: http://stackoverflow.com/questions/16015810/jquery-mobile-best-way-to-create-pop-up-and-content-dynamically

    var $config = $("<div/>").popup({
        theme : "a",
        overlyaTheme : "a",
        transition : "pop"
    }).on("popupafterclose", function() {
        //remove the popup when closing
        $(this).remove();
    });

    $("<h2/>", {
        text : "Data Gather Configuration"
    }).appendTo($config);

    //Create a submit button(fake)
    $("<a>", {
        text : "OK"
    }).buttonMarkup({
        inline : true,
        icon : "check"
    }).bind("click", function() {
        $config.popup("close");
        check_for_dgather_changes();
        //that.subscribeToAsset(callback);
    }).appendTo($config);

    //create a back button
    $("<a>", {
        text : "Cancel",
    }).buttonMarkup({
        inline : true,
        icon : "back"
    }).bind('click', function() {
        $config.popup('close');
    }).appendTo($config);

    $config.popup("open").trigger("create");
};

check_for_dgather_changes = function() {

//    if ( $('#rate').val() != lboard_config.rate ) {
//        lboard_ws.send(JSON.stringify( { type: "set_rate", rate: $('#rate').val() } ));             }
//    if ( $('#lboards').val() != lboard_config.series ) {
//        lboard_ws.send(JSON.stringify( { type: "set_series", series: $('#lboards').val() } ));    }

};
